// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dmi.copy_red_shift_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: copy_red_shift Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.2.1.20160704_1411
 * @status 
 */
public class copy_red_shift implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (ParamA != null) {

				this.setProperty("ParamA", ParamA.toString());

			}

		}

		public String ParamA;

		public String getParamA() {
			return this.ParamA;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "copy_red_shift";
	private final String projectName = "DMI";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					copy_red_shift.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(copy_red_shift.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tS3List_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRedshiftRow_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRedshiftRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRedshiftRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRedshiftOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tIterateToFlow_1_ITFO_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tIterateToFlow_1_AI_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tS3List_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRedshiftRow_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tIterateToFlow_1_AI_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class OnSubjobOkStructtIterateToFlow_1 implements
			routines.system.IPersistableRow<OnSubjobOkStructtIterateToFlow_1> {
		final static byte[] commonByteArrayLock_DMI_copy_red_shift = new byte[0];
		static byte[] commonByteArray_DMI_copy_red_shift = new byte[0];

		public String FileList;

		public String getFileList() {
			return this.FileList;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMI_copy_red_shift.length) {
					if (length < 1024
							&& commonByteArray_DMI_copy_red_shift.length == 0) {
						commonByteArray_DMI_copy_red_shift = new byte[1024];
					} else {
						commonByteArray_DMI_copy_red_shift = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DMI_copy_red_shift, 0, length);
				strReturn = new String(commonByteArray_DMI_copy_red_shift, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMI_copy_red_shift) {

				try {

					int length = 0;

					this.FileList = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FileList, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FileList=" + FileList);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnSubjobOkStructtIterateToFlow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tS3List_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tS3List_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tS3List_1 begin ] start
				 */

				int NB_ITERATE_tIterateToFlow_1_ITFO = 0; // for statistics

				ok_Hash.put("tS3List_1", false);
				start_Hash.put("tS3List_1", System.currentTimeMillis());

				currentComponent = "tS3List_1";

				int tos_count_tS3List_1 = 0;

				final String decryptedPassword_tS3List_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("c86d6eb857bd3afd8b76a6482322f20f025f2c0ceeb79c6d7e168cb5159297916ad91c8465413c09f4f7aba1746784ea");

				com.amazonaws.auth.AWSCredentials credentials_tS3List_1 = new com.amazonaws.auth.BasicAWSCredentials(
						"AKIAIUNBEFBTC73FW24A", decryptedPassword_tS3List_1);

				com.amazonaws.services.s3.AmazonS3Client conn_tS3List_1 = new com.amazonaws.services.s3.AmazonS3Client(
						credentials_tS3List_1);

				int nb_bucket_tS3List_1 = 0;
				int nb_bucket_object_tS3List_1 = 0;
				try {

					java.util.List<java.util.Map<String, String>> buckets_map_list_tS3List_1 = new java.util.ArrayList<java.util.Map<String, String>>();
					java.util.Map<String, String> bucket_prefix_map_tS3List_1 = null;
					String object_prefix_tS3List_1 = "";

					object_prefix_tS3List_1 = "DT_Drop/";

					bucket_prefix_map_tS3List_1 = new java.util.HashMap<String, String>();
					bucket_prefix_map_tS3List_1.put("petermerrick-test",
							object_prefix_tS3List_1);
					buckets_map_list_tS3List_1.add(bucket_prefix_map_tS3List_1);
					object_prefix_tS3List_1 = "";

					for (java.util.Map<String, String> bucketMap_tS3List_1 : buckets_map_list_tS3List_1) {
						String currentBucketName_tS3List_1 = "";
						String currentPrefix_tS3List_1 = "";
						for (java.util.Map.Entry<String, String> entry_tS3List_1 : bucketMap_tS3List_1
								.entrySet()) {
							currentBucketName_tS3List_1 = entry_tS3List_1
									.getKey();
							currentPrefix_tS3List_1 = entry_tS3List_1
									.getValue();
						}
						com.amazonaws.services.s3.model.ObjectListing objects_tS3List_1 = null;
						try {

							objects_tS3List_1 = conn_tS3List_1.listObjects(
									currentBucketName_tS3List_1,
									currentPrefix_tS3List_1);
						} catch (com.amazonaws.AmazonClientException e_tS3List_1) {

							System.err
									.println("WARNING: [tS3List_1] failed to list objects from bucket "
											+ currentBucketName_tS3List_1);
							System.err.println("WARNING: [tS3List_1] "
									+ e_tS3List_1.getMessage());

							continue;
						}

						while (true) {
							java.util.List<com.amazonaws.services.s3.model.S3ObjectSummary> list_objects_tS3List_1 = objects_tS3List_1
									.getObjectSummaries();
							if (list_objects_tS3List_1.size() > 0) {
								nb_bucket_tS3List_1++;
							}
							for (com.amazonaws.services.s3.model.S3ObjectSummary objectSummary_tS3List_1 : list_objects_tS3List_1) {
								nb_bucket_object_tS3List_1++;
								globalMap.put("tS3List_1_CURRENT_BUCKET",
										currentBucketName_tS3List_1);
								globalMap.put("tS3List_1_CURRENT_KEY",
										objectSummary_tS3List_1.getKey());

								/**
								 * [tS3List_1 begin ] stop
								 */

								/**
								 * [tS3List_1 main ] start
								 */

								currentComponent = "tS3List_1";

								tos_count_tS3List_1++;

								/**
								 * [tS3List_1 main ] stop
								 */
								NB_ITERATE_tIterateToFlow_1_ITFO++;

								/**
								 * [tIterateToFlow_1_ITFO begin ] start
								 */

								ok_Hash.put("tIterateToFlow_1_ITFO", false);
								start_Hash.put("tIterateToFlow_1_ITFO",
										System.currentTimeMillis());

								currentVirtualComponent = "tIterateToFlow_1";

								currentComponent = "tIterateToFlow_1_ITFO";

								int tos_count_tIterateToFlow_1_ITFO = 0;

								OnSubjobOkStructtIterateToFlow_1 struct_tIterateToFlow_1_ITFO = new OnSubjobOkStructtIterateToFlow_1();
								struct_tIterateToFlow_1_ITFO.FileList = ((String) globalMap
										.get("tS3List_1_CURRENT_KEY"));

								if (globalMap.get("tIterateToFlow_1") != null) {
									java.util.List<OnSubjobOkStructtIterateToFlow_1> list_tIterateToFlow_1_ITFO = (java.util.List<OnSubjobOkStructtIterateToFlow_1>) globalMap
											.get("tIterateToFlow_1");
									list_tIterateToFlow_1_ITFO
											.add(struct_tIterateToFlow_1_ITFO);
								} else {
									java.util.List<OnSubjobOkStructtIterateToFlow_1> list_tIterateToFlow_1_ITFO = new java.util.ArrayList<OnSubjobOkStructtIterateToFlow_1>();
									list_tIterateToFlow_1_ITFO
											.add(struct_tIterateToFlow_1_ITFO);
									globalMap.put("tIterateToFlow_1",
											list_tIterateToFlow_1_ITFO);
								}

								/**
								 * [tIterateToFlow_1_ITFO begin ] stop
								 */

								/**
								 * [tIterateToFlow_1_ITFO main ] start
								 */

								currentVirtualComponent = "tIterateToFlow_1";

								currentComponent = "tIterateToFlow_1_ITFO";

								tos_count_tIterateToFlow_1_ITFO++;

								/**
								 * [tIterateToFlow_1_ITFO main ] stop
								 */

								/**
								 * [tIterateToFlow_1_ITFO end ] start
								 */

								currentVirtualComponent = "tIterateToFlow_1";

								currentComponent = "tIterateToFlow_1_ITFO";

								ok_Hash.put("tIterateToFlow_1_ITFO", true);
								end_Hash.put("tIterateToFlow_1_ITFO",
										System.currentTimeMillis());

								/**
								 * [tIterateToFlow_1_ITFO end ] stop
								 */

								/**
								 * [tS3List_1 end ] start
								 */

								currentComponent = "tS3List_1";

							}
							if (!objects_tS3List_1.isTruncated()) {
								break;
							}
							objects_tS3List_1 = conn_tS3List_1
									.listNextBatchOfObjects(objects_tS3List_1);
						}
					}

				} catch (com.amazonaws.AmazonClientException e_tS3List_1) {

					System.err.println(e_tS3List_1.getMessage());

				} finally {
					if (conn_tS3List_1 != null) {
						conn_tS3List_1.shutdown();
					}

				}
				globalMap.put("tS3List_1_NB_BUCKET", nb_bucket_tS3List_1);
				globalMap.put("tS3List_1_NB_BUCKET_OBJECT",
						nb_bucket_object_tS3List_1);

				ok_Hash.put("tS3List_1", true);
				end_Hash.put("tS3List_1", System.currentTimeMillis());

				/**
				 * [tS3List_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tS3List_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tIterateToFlow_1_AIProcess(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tS3List_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRedshiftRow_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tS3List_1 finally ] start
				 */

				currentComponent = "tS3List_1";

				/**
				 * [tS3List_1 finally ] stop
				 */

				/**
				 * [tIterateToFlow_1_ITFO finally ] start
				 */

				currentVirtualComponent = "tIterateToFlow_1";

				currentComponent = "tIterateToFlow_1_ITFO";

				/**
				 * [tIterateToFlow_1_ITFO finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tS3List_1_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DMI_copy_red_shift = new byte[0];
		static byte[] commonByteArray_DMI_copy_red_shift = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMI_copy_red_shift) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRedshiftRow_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRedshiftRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				int tos_count_tLogRow_1 = 0;

				// /////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[0];

					public void addRow(String[] row) {

						for (int i = 0; i < 0; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i],
										row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] {});
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tRedshiftRow_1 begin ] start
				 */

				ok_Hash.put("tRedshiftRow_1", false);
				start_Hash.put("tRedshiftRow_1", System.currentTimeMillis());

				currentComponent = "tRedshiftRow_1";

				int tos_count_tRedshiftRow_1 = 0;

				java.sql.Connection conn_tRedshiftRow_1 = null;
				String query_tRedshiftRow_1 = "";
				boolean whetherReject_tRedshiftRow_1 = false;
				String driverClass_tRedshiftRow_1 = "com.amazon.redshift.jdbc41.Driver";
				java.lang.Class.forName(driverClass_tRedshiftRow_1);

				String url_tRedshiftRow_1 = "jdbc:redshift://"
						+ "mcdtalendpoc.cj4pclpbavnm.us-west-2.redshift.amazonaws.com"
						+ ":" + "5439" + "/" + "mcdtalendpoc";
				String dbUser_tRedshiftRow_1 = "slalommcd";

				final String decryptedPassword_tRedshiftRow_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("e30b2b53a2a02395aa4cf535bb233d37");

				String dbPwd_tRedshiftRow_1 = decryptedPassword_tRedshiftRow_1;

				conn_tRedshiftRow_1 = java.sql.DriverManager.getConnection(
						url_tRedshiftRow_1, dbUser_tRedshiftRow_1,
						dbPwd_tRedshiftRow_1);

				if (conn_tRedshiftRow_1.getAutoCommit()) {

					conn_tRedshiftRow_1.setAutoCommit(false);

				}
				int commitEvery_tRedshiftRow_1 = 10000;
				int commitCounter_tRedshiftRow_1 = 0;

				java.sql.PreparedStatement pstmt_tRedshiftRow_1 = conn_tRedshiftRow_1
						.prepareStatement("copy emp_id from 's3://petermerrick-test/cust.manifest' credentials 'aws_access_key_id=AKIAIUNBEFBTC73FW24A;aws_secret_access_key=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' delimiter ',' manifest;");

				/**
				 * [tRedshiftRow_1 begin ] stop
				 */

				/**
				 * [tRedshiftRow_1 main ] start
				 */

				currentComponent = "tRedshiftRow_1";

				row1 = null;

				query_tRedshiftRow_1 = "copy emp_id from 's3://petermerrick-test/cust.manifest' credentials 'aws_access_key_id=AKIAIUNBEFBTC73FW24A;aws_secret_access_key=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' delimiter ',' manifest;";
				whetherReject_tRedshiftRow_1 = false;
				globalMap.put("tRedshiftRow_1_QUERY", query_tRedshiftRow_1);
				try {
					pstmt_tRedshiftRow_1.execute();

				} catch (java.lang.Exception e) {
					whetherReject_tRedshiftRow_1 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tRedshiftRow_1) {

					row1 = new row1Struct();

				}

				commitCounter_tRedshiftRow_1++;
				if (commitEvery_tRedshiftRow_1 <= commitCounter_tRedshiftRow_1) {

					conn_tRedshiftRow_1.commit();

					commitCounter_tRedshiftRow_1 = 0;
				}

				tos_count_tRedshiftRow_1++;

				/**
				 * [tRedshiftRow_1 main ] stop
				 */
				// Start of branch "row1"
				if (row1 != null) {

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					// /////////////////////

					String[] row_tLogRow_1 = new String[0];

					util_tLogRow_1.addRow(row_tLogRow_1);
					nb_line_tLogRow_1++;
					// ////

					// ////

					// /////////////////////

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

				} // End of branch "row1"

				/**
				 * [tRedshiftRow_1 end ] start
				 */

				currentComponent = "tRedshiftRow_1";

				pstmt_tRedshiftRow_1.close();
				if (commitEvery_tRedshiftRow_1 > commitCounter_tRedshiftRow_1) {

					conn_tRedshiftRow_1.commit();

					commitCounter_tRedshiftRow_1 = 0;

				}
				conn_tRedshiftRow_1.close();

				ok_Hash.put("tRedshiftRow_1", true);
				end_Hash.put("tRedshiftRow_1", System.currentTimeMillis());

				/**
				 * [tRedshiftRow_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1
						.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRedshiftRow_1 finally ] start
				 */

				currentComponent = "tRedshiftRow_1";

				/**
				 * [tRedshiftRow_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRedshiftRow_1_SUBPROCESS_STATE", 1);
	}

	public static class zxdfStruct implements
			routines.system.IPersistableRow<zxdfStruct> {
		final static byte[] commonByteArrayLock_DMI_copy_red_shift = new byte[0];
		static byte[] commonByteArray_DMI_copy_red_shift = new byte[0];

		public String FileList;

		public String getFileList() {
			return this.FileList;
		}

		public String Complete;

		public String getComplete() {
			return this.Complete;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMI_copy_red_shift.length) {
					if (length < 1024
							&& commonByteArray_DMI_copy_red_shift.length == 0) {
						commonByteArray_DMI_copy_red_shift = new byte[1024];
					} else {
						commonByteArray_DMI_copy_red_shift = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DMI_copy_red_shift, 0, length);
				strReturn = new String(commonByteArray_DMI_copy_red_shift, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMI_copy_red_shift) {

				try {

					int length = 0;

					this.FileList = readString(dis);

					this.Complete = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FileList, dos);

				// String

				writeString(this.Complete, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FileList=" + FileList);
			sb.append(",Complete=" + Complete);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(zxdfStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class redStruct implements
			routines.system.IPersistableRow<redStruct> {
		final static byte[] commonByteArrayLock_DMI_copy_red_shift = new byte[0];
		static byte[] commonByteArray_DMI_copy_red_shift = new byte[0];

		public String file_name;

		public String getFile_name() {
			return this.file_name;
		}

		public String Complete;

		public String getComplete() {
			return this.Complete;
		}

		public String file;

		public String getFile() {
			return this.file;
		}

		public String FileDate;

		public String getFileDate() {
			return this.FileDate;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMI_copy_red_shift.length) {
					if (length < 1024
							&& commonByteArray_DMI_copy_red_shift.length == 0) {
						commonByteArray_DMI_copy_red_shift = new byte[1024];
					} else {
						commonByteArray_DMI_copy_red_shift = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DMI_copy_red_shift, 0, length);
				strReturn = new String(commonByteArray_DMI_copy_red_shift, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMI_copy_red_shift) {

				try {

					int length = 0;

					this.file_name = readString(dis);

					this.Complete = readString(dis);

					this.file = readString(dis);

					this.FileDate = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.file_name, dos);

				// String

				writeString(this.Complete, dos);

				// String

				writeString(this.file, dos);

				// String

				writeString(this.FileDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("file_name=" + file_name);
			sb.append(",Complete=" + Complete);
			sb.append(",file=" + file);
			sb.append(",FileDate=" + FileDate);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(redStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DMI_copy_red_shift = new byte[0];
		static byte[] commonByteArray_DMI_copy_red_shift = new byte[0];

		public String FileList;

		public String getFileList() {
			return this.FileList;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMI_copy_red_shift.length) {
					if (length < 1024
							&& commonByteArray_DMI_copy_red_shift.length == 0) {
						commonByteArray_DMI_copy_red_shift = new byte[1024];
					} else {
						commonByteArray_DMI_copy_red_shift = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DMI_copy_red_shift, 0, length);
				strReturn = new String(commonByteArray_DMI_copy_red_shift, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMI_copy_red_shift) {

				try {

					int length = 0;

					this.FileList = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FileList, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FileList=" + FileList);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tIterateToFlow_1_AIProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tIterateToFlow_1_AI_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				zxdfStruct zxdf = new zxdfStruct();
				redStruct red = new redStruct();

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				int tos_count_tLogRow_2 = 0;

				// /////////////////////

				class Util_tLogRow_2 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[2];

					public void addRow(String[] row) {

						for (int i = 0; i < 2; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i],
										row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 1 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 1 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(
									new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(),
									(Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0]
								- fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[1]
								- fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
				util_tLogRow_2.setTableName("tLogRow_2");
				util_tLogRow_2.addRow(new String[] { "FileList", "Complete", });
				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
				// /////////////////////

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tRedshiftOutput_1 begin ] start
				 */

				ok_Hash.put("tRedshiftOutput_1", false);
				start_Hash.put("tRedshiftOutput_1", System.currentTimeMillis());

				currentComponent = "tRedshiftOutput_1";

				int tos_count_tRedshiftOutput_1 = 0;

				String dbschema_tRedshiftOutput_1 = null;
				dbschema_tRedshiftOutput_1 = "public";

				String tableName_tRedshiftOutput_1 = "abac_file_list_t";
				String schemaForSearch_tRedshiftOutput_1 = null;
				String tableForSearch_tRedshiftOutput_1 = tableName_tRedshiftOutput_1;
				if (dbschema_tRedshiftOutput_1 != null
						&& dbschema_tRedshiftOutput_1.trim().length() > 0) {
					tableName_tRedshiftOutput_1 = dbschema_tRedshiftOutput_1
							+ "\".\"" + tableName_tRedshiftOutput_1;
				}

				int nb_line_tRedshiftOutput_1 = 0;
				int nb_line_update_tRedshiftOutput_1 = 0;
				int nb_line_inserted_tRedshiftOutput_1 = 0;
				int nb_line_deleted_tRedshiftOutput_1 = 0;
				int nb_line_rejected_tRedshiftOutput_1 = 0;

				int deletedCount_tRedshiftOutput_1 = 0;
				int updatedCount_tRedshiftOutput_1 = 0;
				int insertedCount_tRedshiftOutput_1 = 0;
				int rejectedCount_tRedshiftOutput_1 = 0;

				java.util.Calendar calendar_tRedshiftOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tRedshiftOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tRedshiftOutput_1 = calendar_tRedshiftOutput_1
						.getTime().getTime();
				calendar_tRedshiftOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tRedshiftOutput_1 = calendar_tRedshiftOutput_1
						.getTime().getTime();
				long date_tRedshiftOutput_1;

				boolean whetherReject_tRedshiftOutput_1 = false;

				java.sql.Connection conn_tRedshiftOutput_1 = null;

				java.lang.Class.forName("com.amazon.redshift.jdbc41.Driver");

				String url_tRedshiftOutput_1 = "jdbc:redshift://"
						+ "mcdtalendpoc.cj4pclpbavnm.us-west-2.redshift.amazonaws.com"
						+ ":" + "5439" + "/" + "mcdtalendpoc";

				String dbUser_tRedshiftOutput_1 = "slalommcd";

				final String decryptedPassword_tRedshiftOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("e30b2b53a2a02395aa4cf535bb233d37");

				String dbPwd_tRedshiftOutput_1 = decryptedPassword_tRedshiftOutput_1;
				conn_tRedshiftOutput_1 = java.sql.DriverManager.getConnection(
						url_tRedshiftOutput_1, dbUser_tRedshiftOutput_1,
						dbPwd_tRedshiftOutput_1);

				resourceMap.put("conn_tRedshiftOutput_1",
						conn_tRedshiftOutput_1);
				conn_tRedshiftOutput_1.setAutoCommit(false);

				int commitEvery_tRedshiftOutput_1 = 10000;
				int commitCounter_tRedshiftOutput_1 = 0;
				int count_tRedshiftOutput_1 = 0;

				java.sql.Statement stmtDrop_tRedshiftOutput_1 = conn_tRedshiftOutput_1
						.createStatement();
				stmtDrop_tRedshiftOutput_1.execute("DROP TABLE \""
						+ tableName_tRedshiftOutput_1 + "\"");
				stmtDrop_tRedshiftOutput_1.close();
				java.sql.Statement stmtCreate_tRedshiftOutput_1 = conn_tRedshiftOutput_1
						.createStatement();
				stmtCreate_tRedshiftOutput_1
						.execute("CREATE TABLE \""
								+ tableName_tRedshiftOutput_1
								+ "\"(\"file_name\" VARCHAR ,\"IsCompleted\" VARCHAR(1)  ,\"file\" VARCHAR ,\"FileDate\" VARCHAR )");
				stmtCreate_tRedshiftOutput_1.close();
				int rowCounttRedshiftOutput_1 = 0;
				class BufferLine_tRedshiftOutput_1 {
					String file_name;
					String Complete;
					String file;
					String FileDate;

					public BufferLine_tRedshiftOutput_1(String file_name,
							String Complete, String file, String FileDate) {
						this.file_name = file_name;
						this.Complete = Complete;
						this.file = file;
						this.FileDate = FileDate;
					}
				}

				java.util.List<BufferLine_tRedshiftOutput_1> exInsertColValueListtRedshiftOutput_1 = new java.util.ArrayList();
				BufferLine_tRedshiftOutput_1 exInsertColValuetRedshiftOutput_1 = null;

				StringBuilder extendInsertValueStmt_tRedshiftOutput_1 = new StringBuilder();
				for (int i_tRedshiftOutput_1 = 0; i_tRedshiftOutput_1 < 100; i_tRedshiftOutput_1++) {
					extendInsertValueStmt_tRedshiftOutput_1.append("(?,?,?,?)");
					if (i_tRedshiftOutput_1 != 100 - 1)
						extendInsertValueStmt_tRedshiftOutput_1.append(",");
				}

				String insert_tRedshiftOutput_1 = "INSERT INTO \""
						+ tableName_tRedshiftOutput_1
						+ "\" (\"file_name\",\"IsCompleted\",\"file\",\"FileDate\") VALUES "
						+ extendInsertValueStmt_tRedshiftOutput_1.toString();
				java.sql.PreparedStatement pstmt_tRedshiftOutput_1 = conn_tRedshiftOutput_1
						.prepareStatement(insert_tRedshiftOutput_1);

				/**
				 * [tRedshiftOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				zxdfStruct zxdf_tmp = new zxdfStruct();
				redStruct red_tmp = new redStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tIterateToFlow_1_AI begin ] start
				 */

				ok_Hash.put("tIterateToFlow_1_AI", false);
				start_Hash.put("tIterateToFlow_1_AI",
						System.currentTimeMillis());

				currentVirtualComponent = "tIterateToFlow_1";

				currentComponent = "tIterateToFlow_1_AI";

				int tos_count_tIterateToFlow_1_AI = 0;

				int nb_line_tIterateToFlow_1_AI = 0;
				java.util.List<OnSubjobOkStructtIterateToFlow_1> list_tIterateToFlow_1_AI = (java.util.List<OnSubjobOkStructtIterateToFlow_1>) globalMap
						.get("tIterateToFlow_1");
				if (list_tIterateToFlow_1_AI == null) {
					list_tIterateToFlow_1_AI = new java.util.ArrayList<OnSubjobOkStructtIterateToFlow_1>();
				}
				for (OnSubjobOkStructtIterateToFlow_1 row_tIterateToFlow_1_AI : list_tIterateToFlow_1_AI) {

					row2.FileList = row_tIterateToFlow_1_AI.FileList;

					/**
					 * [tIterateToFlow_1_AI begin ] stop
					 */

					/**
					 * [tIterateToFlow_1_AI main ] start
					 */

					currentVirtualComponent = "tIterateToFlow_1";

					currentComponent = "tIterateToFlow_1_AI";

					tos_count_tIterateToFlow_1_AI++;

					/**
					 * [tIterateToFlow_1_AI main ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
						// ###############################
						// # Output tables

						zxdf = null;
						red = null;

						// # Output table : 'zxdf'
						zxdf_tmp.FileList = row2.FileList;
						zxdf_tmp.Complete = context.ParamA;
						zxdf = zxdf_tmp;

						// # Output table : 'red'
						red_tmp.file_name = row2.FileList;
						red_tmp.Complete = Character.toString('N');
						red_tmp.file = StringHandling.LEFT(StringHandling
								.RIGHT(row2.FileList,
										StringHandling.LEN(row2.FileList) - 8),
								5);
						red_tmp.FileDate = StringHandling.LEFT(
								StringHandling.RIGHT(row2.FileList, 12), 8);
						red = red_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */
					// Start of branch "zxdf"
					if (zxdf != null) {

						/**
						 * [tLogRow_2 main ] start
						 */

						currentComponent = "tLogRow_2";

						// /////////////////////

						String[] row_tLogRow_2 = new String[2];

						if (zxdf.FileList != null) { //
							row_tLogRow_2[0] = String.valueOf(zxdf.FileList);

						} //

						if (zxdf.Complete != null) { //
							row_tLogRow_2[1] = String.valueOf(zxdf.Complete);

						} //

						util_tLogRow_2.addRow(row_tLogRow_2);
						nb_line_tLogRow_2++;
						// ////

						// ////

						// /////////////////////

						tos_count_tLogRow_2++;

						/**
						 * [tLogRow_2 main ] stop
						 */

					} // End of branch "zxdf"

					// Start of branch "red"
					if (red != null) {

						/**
						 * [tRedshiftOutput_1 main ] start
						 */

						currentComponent = "tRedshiftOutput_1";

						whetherReject_tRedshiftOutput_1 = false;
						int countertRedshiftOutput_1 = rowCounttRedshiftOutput_1 * (4) + 1;

						if (red.file_name == null) {
							pstmt_tRedshiftOutput_1.setNull(
									countertRedshiftOutput_1,
									java.sql.Types.VARCHAR);

						} else {

							pstmt_tRedshiftOutput_1.setString(
									countertRedshiftOutput_1, red.file_name);

						}

						countertRedshiftOutput_1++;

						if (red.Complete == null) {
							pstmt_tRedshiftOutput_1.setNull(
									countertRedshiftOutput_1,
									java.sql.Types.VARCHAR);

						} else {

							pstmt_tRedshiftOutput_1.setString(
									countertRedshiftOutput_1, red.Complete);

						}

						countertRedshiftOutput_1++;

						if (red.file == null) {
							pstmt_tRedshiftOutput_1.setNull(
									countertRedshiftOutput_1,
									java.sql.Types.VARCHAR);

						} else {

							pstmt_tRedshiftOutput_1.setString(
									countertRedshiftOutput_1, red.file);

						}

						countertRedshiftOutput_1++;

						if (red.FileDate == null) {
							pstmt_tRedshiftOutput_1.setNull(
									countertRedshiftOutput_1,
									java.sql.Types.VARCHAR);

						} else {

							pstmt_tRedshiftOutput_1.setString(
									countertRedshiftOutput_1, red.FileDate);

						}

						countertRedshiftOutput_1++;

						exInsertColValuetRedshiftOutput_1 = new BufferLine_tRedshiftOutput_1(
								red.file_name, red.Complete, red.file,
								red.FileDate);

						exInsertColValueListtRedshiftOutput_1
								.add(exInsertColValuetRedshiftOutput_1);
						rowCounttRedshiftOutput_1++;

						nb_line_tRedshiftOutput_1++;

						if (rowCounttRedshiftOutput_1 == 100) {
							insertedCount_tRedshiftOutput_1 = insertedCount_tRedshiftOutput_1
									+ pstmt_tRedshiftOutput_1.executeUpdate();
							exInsertColValueListtRedshiftOutput_1.clear();
							rowCounttRedshiftOutput_1 = 0;
							countertRedshiftOutput_1 = 1;
						}
						commitCounter_tRedshiftOutput_1++;

						if (commitEvery_tRedshiftOutput_1 <= commitCounter_tRedshiftOutput_1) {
							conn_tRedshiftOutput_1.commit();
							commitCounter_tRedshiftOutput_1 = 0;
						}

						tos_count_tRedshiftOutput_1++;

						/**
						 * [tRedshiftOutput_1 main ] stop
						 */

					} // End of branch "red"

					/**
					 * [tIterateToFlow_1_AI end ] start
					 */

					currentVirtualComponent = "tIterateToFlow_1";

					currentComponent = "tIterateToFlow_1_AI";

					nb_line_tIterateToFlow_1_AI++;
				}
				globalMap.put("tIterateToFlow_1_AI_NB_LINE",
						nb_line_tIterateToFlow_1_AI);

				ok_Hash.put("tIterateToFlow_1_AI", true);
				end_Hash.put("tIterateToFlow_1_AI", System.currentTimeMillis());

				/**
				 * [tIterateToFlow_1_AI end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

				// ////

				java.io.PrintStream consoleOut_tLogRow_2 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_2 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
				}

				consoleOut_tLogRow_2
						.println(util_tLogRow_2.format().toString());
				consoleOut_tLogRow_2.flush();
				// ////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

				// /////////////////////

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

				/**
				 * [tRedshiftOutput_1 end ] start
				 */

				currentComponent = "tRedshiftOutput_1";

				if (rowCounttRedshiftOutput_1 != 0) {

					StringBuilder extendInsertValue_tRedshiftOutput_1 = new StringBuilder();
					for (int i_tRedshiftOutput_1 = 0; i_tRedshiftOutput_1 < rowCounttRedshiftOutput_1; i_tRedshiftOutput_1++) {
						extendInsertValue_tRedshiftOutput_1.append("(?,?,?,?)");
						if (i_tRedshiftOutput_1 != rowCounttRedshiftOutput_1 - 1)
							extendInsertValue_tRedshiftOutput_1.append(",");
					}

					insert_tRedshiftOutput_1 = "INSERT INTO \""
							+ tableName_tRedshiftOutput_1
							+ "\" (\"file_name\",\"IsCompleted\",\"file\",\"FileDate\") VALUES "
							+ extendInsertValue_tRedshiftOutput_1.toString();
					pstmt_tRedshiftOutput_1 = conn_tRedshiftOutput_1
							.prepareStatement(insert_tRedshiftOutput_1);
					rowCounttRedshiftOutput_1 = 0;
					for (BufferLine_tRedshiftOutput_1 bufferLtRedshiftOutput_1 : exInsertColValueListtRedshiftOutput_1) {
						int counttRedshiftOutput_1 = rowCounttRedshiftOutput_1 * (4) + 1;
						if (bufferLtRedshiftOutput_1.file_name == null) {
							pstmt_tRedshiftOutput_1.setNull(
									counttRedshiftOutput_1,
									java.sql.Types.VARCHAR);

						} else {

							pstmt_tRedshiftOutput_1.setString(
									counttRedshiftOutput_1,
									bufferLtRedshiftOutput_1.file_name);

						}

						counttRedshiftOutput_1++;

						if (bufferLtRedshiftOutput_1.Complete == null) {
							pstmt_tRedshiftOutput_1.setNull(
									counttRedshiftOutput_1,
									java.sql.Types.VARCHAR);

						} else {

							pstmt_tRedshiftOutput_1.setString(
									counttRedshiftOutput_1,
									bufferLtRedshiftOutput_1.Complete);

						}

						counttRedshiftOutput_1++;

						if (bufferLtRedshiftOutput_1.file == null) {
							pstmt_tRedshiftOutput_1.setNull(
									counttRedshiftOutput_1,
									java.sql.Types.VARCHAR);

						} else {

							pstmt_tRedshiftOutput_1.setString(
									counttRedshiftOutput_1,
									bufferLtRedshiftOutput_1.file);

						}

						counttRedshiftOutput_1++;

						if (bufferLtRedshiftOutput_1.FileDate == null) {
							pstmt_tRedshiftOutput_1.setNull(
									counttRedshiftOutput_1,
									java.sql.Types.VARCHAR);

						} else {

							pstmt_tRedshiftOutput_1.setString(
									counttRedshiftOutput_1,
									bufferLtRedshiftOutput_1.FileDate);

						}

						counttRedshiftOutput_1++;

						rowCounttRedshiftOutput_1++;
					}
					insertedCount_tRedshiftOutput_1 = insertedCount_tRedshiftOutput_1
							+ pstmt_tRedshiftOutput_1.executeUpdate();
				}

				if (pstmt_tRedshiftOutput_1 != null) {
					pstmt_tRedshiftOutput_1.close();
				}

				if (commitCounter_tRedshiftOutput_1 > 0) {

					conn_tRedshiftOutput_1.commit();

				}

				conn_tRedshiftOutput_1.close();

				resourceMap.put("finish_tRedshiftOutput_1", true);

				nb_line_deleted_tRedshiftOutput_1 = nb_line_deleted_tRedshiftOutput_1
						+ deletedCount_tRedshiftOutput_1;
				nb_line_update_tRedshiftOutput_1 = nb_line_update_tRedshiftOutput_1
						+ updatedCount_tRedshiftOutput_1;
				nb_line_inserted_tRedshiftOutput_1 = nb_line_inserted_tRedshiftOutput_1
						+ insertedCount_tRedshiftOutput_1;
				nb_line_rejected_tRedshiftOutput_1 = nb_line_rejected_tRedshiftOutput_1
						+ rejectedCount_tRedshiftOutput_1;

				globalMap.put("tRedshiftOutput_1_NB_LINE",
						nb_line_tRedshiftOutput_1);
				globalMap.put("tRedshiftOutput_1_NB_LINE_UPDATED",
						nb_line_update_tRedshiftOutput_1);
				globalMap.put("tRedshiftOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tRedshiftOutput_1);
				globalMap.put("tRedshiftOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tRedshiftOutput_1);
				globalMap.put("tRedshiftOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tRedshiftOutput_1);

				ok_Hash.put("tRedshiftOutput_1", true);
				end_Hash.put("tRedshiftOutput_1", System.currentTimeMillis());

				/**
				 * [tRedshiftOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tIterateToFlow_1_AI"
			globalMap.remove("tIterateToFlow_1");

			try {

				/**
				 * [tIterateToFlow_1_AI finally ] start
				 */

				currentVirtualComponent = "tIterateToFlow_1";

				currentComponent = "tIterateToFlow_1_AI";

				/**
				 * [tIterateToFlow_1_AI finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tRedshiftOutput_1 finally ] start
				 */

				currentComponent = "tRedshiftOutput_1";

				if (resourceMap.get("finish_tRedshiftOutput_1") == null) {
					if (resourceMap.get("conn_tRedshiftOutput_1") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tRedshiftOutput_1")).close();

						} catch (java.sql.SQLException sqlEx_tRedshiftOutput_1) {
							String errorMessage_tRedshiftOutput_1 = "failed to close the connection in tRedshiftOutput_1 :"
									+ sqlEx_tRedshiftOutput_1.getMessage();

							System.err.println(errorMessage_tRedshiftOutput_1);
						}
					}
				}

				/**
				 * [tRedshiftOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tIterateToFlow_1_AI_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final copy_red_shift copy_red_shiftClass = new copy_red_shift();

		int exitCode = copy_red_shiftClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = copy_red_shift.class
					.getClassLoader().getResourceAsStream(
							"dmi/copy_red_shift_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.ParamA = (String) context.getProperty("ParamA");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("ParamA")) {
				context.ParamA = (String) parentContextMap.get("ParamA");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tS3List_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tS3List_1) {
			globalMap.put("tS3List_1_SUBPROCESS_STATE", -1);

			e_tS3List_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : copy_red_shift");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 78235 characters generated by Talend Open Studio for Big Data on the November
 * 16, 2016 2:41:37 PM CST
 ************************************************************************************************/
